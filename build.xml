<project name="RCSBlackberry" default="build" basedir=".">
	<typedef resource="bb-ant-defs.xml" />
	<!-- <taskdef resource="net/sf/antcontrib/antcontrib.properties" /> -->
	<taskdef resource="net/sf/antcontrib/antlib.xml" />

	<!-- Environment properties -->
	<property file="local.properties" />

	<path id="lib.classpath">
		<path location="${net_rim_api.jar}" />
	</path>

	<!-- Internal properties -->
	<property name="wtk.cldc.version" value="1.1" />
	<property name="wtk.midp.version" value="2.0" />
	<!-- property name="obfuscation" value="true" -->
	<property name="resources" location="res" />

	<!-- Application properties -->
	<property name="ht.vendor" value="RIM" />
	<property name="ht.version" value="1.0" />

	<property name="lib.codename" value="rcs_lib" />
	<property name="core.codename" value="rcs_core" />

	<!-- Symbols -->
	<property name="preprocess.debug.symbols" value="DEBUG,DBC,DEMO,FAKECONF" />
	<property name="preprocess.demo.symbols" value="DEMO,RELEASE" />
	<property name="preprocess.release.symbols" value="RELEASE" />

	<!-- Sources -->
	<property name="lib.src" location="RCSBlackBerryResources/src" />
	<property name="core.src" location="RCSBlackBerry/src" />

	<!-- WTK Task definition -->
	<taskdef name="wtkpreprocess" classname="de.pleumann.antenna.WtkPreprocess" classpath="${antenna.jar}" />
	<taskdef name="wtkbuild" classname="de.pleumann.antenna.WtkBuild" classpath="${antenna.jar}" />
	<taskdef name="wtkpreverify" classname="de.pleumann.antenna.WtkPreverify" classpath="${antenna.jar}" />
	<taskdef name="wtkpackage" classname="de.pleumann.antenna.WtkPackage" classpath="${antenna.jar}" />
	<taskdef name="wtkrapc" classname="de.pleumann.antenna.WtkRapc" classpath="${antenna.jar}" />
	<taskdef name="wtkobfuscate" classname="de.pleumann.antenna.WtkObfuscate" classpath="${antenna.jar}" />
	<taskdef name="wtkjad" classname="de.pleumann.antenna.WtkJad" classpath="${antenna.jar}" />

	<target name="Display-Builtins" description="Display Builtin Properties">
		<!-- the absolute path to the location of the buildfile -->
		<echo>${basedir}</echo>
		<!-- the absolute path of the buildfile -->
		<echo>${ant.file}</echo>
		<!-- ant.version - the version of Ant that you are running -->
		<echo>${ant.version}</echo>
		<!-- ant.project.name - the name of the project that is currently executing; it is set in the name attribute of <project>. -->
		<echo>${ant.project.name}</echo>
		<!-- ant.java.version - the JVM version Ant detected; currently it can hold the values "1.1", "1.2", "1.3", "1.4" and "1.5". -->
		<echo>${ant.java.version}</echo>
	</target>

	<target name="preprocess" depends="clean">
		<echo message="=== Init ===" />
		<mkdir dir="build" />
		<mkdir dir="build/core" />
		<mkdir dir="build/lib" />
		<mkdir dir="output" />
	</target>

	<target name="clean">
		<echo message="=== Clean ===" />
		<delete dir="build" includeEmptyDirs="true" />
		<delete dir="output" includeEmptyDirs="true" />
	</target>

	<macrodef name="preprocess">
		<attribute name="dir.src" />
		<attribute name="dir.to" />
		<attribute name="preprocess.symbols" default="" />
		<sequential>
			<echo message="=== Preprocess @{dir.src} => @{dir.to} ===" />
			<mkdir dir="@{dir.to}" />
			<copy todir="@{dir.to}">
				<fileset dir="@{dir.src}">
					<exclude name="**/tests/" />
				</fileset>
			</copy>
			<replace dir="@{dir.to}" token="//#preprocess" value="//!preprocess" />
			<wtkpreprocess verbose="false" srcdir="@{dir.to}" destdir="@{dir.to}" symbols="@{preprocess.symbols}" />
		</sequential>
	</macrodef>


	<macrodef name="libbuild">
		<attribute name="preprocess.symbols" />
		<attribute name="version" />
		<sequential>
			<echo message="=============" />
			<echo message="===  LIB  ===" />
			<echo message="=============" />
			<echo>jde.home=${jde.home}</echo>
			<local name="builddir" />
			<property name="builddir" location="build/lib/@{version}" />
			<mkdir dir="${builddir}/unverified" />
			<mkdir dir="${builddir}/preprocessed" />

			<!-- Create a JAD file. -->
			<wtkjad jadfile="${builddir}/lib.jad" jarfile="${builddir}/lib.jar" name="${lib.codename}" vendor="${ht.vendor}" version="${ht.version}">
				<attribute name="MicroEdition-Configuration" value="CLDC-${wtk.cldc.version}" />
				<attribute name="MicroEdition-Profile" value="MIDP-${wtk.midp.version}" />
			</wtkjad>

			<!-- Preprocess. -->
			<preprocess dir.src="${lib.src}" dir.to="${builddir}/preprocessed" />

			<!-- Compile everything, but don't preverify (yet). -->
			<wtkbuild srcdir="${builddir}/preprocessed" destdir="${builddir}/unverified" preverify="false" />

			<!-- Package our newly compiled classes. -->
			<wtkpackage jarfile="${builddir}/lib.jar" jadfile="${builddir}/lib.jad">
				<fileset dir="${builddir}/unverified" />
				<fileset dir="${builddir}/preprocessed" includes="**/*.bin" />
			</wtkpackage>

			<!-- Preverify -->
			<wtkpreverify jarfile="${builddir}/lib.jar" jadfile="${builddir}/lib.jad" />

			<!-- Rapc -->
			<mkdir dir="output/@{version}" />
			<wtkrapc jadfile="${builddir}/lib.jad" source="${builddir}/lib.jar" codename="${lib.codename}" import="${net_rim_api.jar}" destdir="output/@{version}" midlet="false" library="true" />			
			
			<copy file="${builddir}/lib.jar" tofile="output/@{version}/${lib.codename}.jar"/>
			<move todir="${builddir}">
				<fileset dir=".">
					<include name="${lib.codename}*" />
				</fileset>
			</move>

		</sequential>
	</macrodef>

	<macrodef name="corebuild">
		<attribute name="preprocess.symbols" />
		<attribute name="kind" />
		<attribute name="version" />

		<sequential>
			<echo message="=============" />
			<echo message="===  CORE ===" />
			<echo message="=============" />

			<local name="builddir" />
			<property name="builddir" location="build/core/@{version}/@{kind}" />

			<mkdir dir="${builddir}/unverified" />
			<mkdir dir="${builddir}/preprocessed" />

			<!-- Create a JAD file. -->
			<wtkjad jadfile="${builddir}/core.jad" jarfile="${builddir}/core.jar" name="${core.codename}" vendor="${ht.vendor}" version="${ht.version}">
				<attribute name="MicroEdition-Configuration" value="CLDC-${wtk.cldc.version}" />
				<attribute name="MicroEdition-Profile" value="MIDP-${wtk.midp.version}" />
				<attribute name="RIM-MIDlet-Flags-1" value="3" />
				<attribute name="RIM-COD-Module-Name" value="${core.codename}" />
				<attribute name="MIDlet-Name" value="${core.codename}" />
			</wtkjad>

			<!-- Create a RAPC file. -->
			<manifest file="${builddir}/core.rapc">
				<attribute name="MIDlet-Name" value="${core.codename}" />
				<attribute name="MIDlet-Version" value="${ht.version}" />
				<attribute name="MIDlet-Vendor" value="${ht.vendor}" />
				<attribute name="MIDlet-Jar-URL" value="core.jar" />
				<attribute name="MIDlet-Jar-Size" value="0" />
				<attribute name="MicroEdition-Profile" value="MIDP-${wtk.midp.version}" />
				<attribute name="MicroEdition-Configuration" value="CLDC-${wtk.cldc.version}" />
				<attribute name="MIDlet-1" value="${core.codename},res/Blackberry_icon_sml.png," />
				<attribute name="RIM-MIDlet-Flags-1" value="3" />
			</manifest>

			<!-- Preprocess. -->
			<preprocess dir.src="${core.src}" dir.to="${builddir}/preprocessed" preprocess.symbols="@{preprocess.symbols}" />

			<!-- Compile everything, but don't preverify (yet). -->
			<echo>lib: "output/@{version}/${lib.codename}.jar" </echo>
			<wtkbuild srcdir="${builddir}/preprocessed" destdir="${builddir}/unverified" preverify="true" bootclasspath="${net_rim_api.jar}">
				
				<classpath>
					<path id="core.classpath">
						<path location="${net_rim_api.jar}" />
						<path location="output/@{version}/${lib.codename}.jar" />
					</path>
				</classpath>
			</wtkbuild>

			<!-- Package our newly compiled classes. -->
			<wtkpackage jarfile="${builddir}/core.jar" jadfile="${builddir}/core.jad">
				<fileset dir="${builddir}/unverified" />
				<fileset dir="${core.src}/../res" includes="**/*.png" />
			</wtkpackage>

			<!-- Obfuscate -->
			<wtkobfuscate jarfile="${builddir}/core.jar" jadfile="${builddir}/core.jad" if="false">
				<classpath refid="core.classpath" />
				<argument value="'-keep public class blackberry.Main{
							public static void main(java.lang.String[]);
							}'" />
				<argument value="-dontshrink -dontusemixedcaseclassnames -dontnote -repackageclasses 'bin' -overloadaggressively -allowaccessmodification -microedition" />
			</wtkobfuscate>

			<!-- Preverify -->
			<wtkpreverify jarfile="${builddir}/core.jar" jadfile="${builddir}/core.jad">
				<classpath refid="core.classpath" />
			</wtkpreverify>

			<!-- Rapc 
			<wtkrapc jadfile="${builddir}/core.jad" source="${builddir}/core.jar" codename="${core.codename}" import="${net_rim_api.jar};output/@{version}/lib.jar" destdir="${builddir}" quiet="true" midlet="false" library="false" />
			-->
			
			<exec dir="${builddir}" executable="${bb.buildjars.home}/rapc.exe" failonerror="true">
			    <arg value="-quiet"/>
			    <arg value="import=${net_rim_api.jar}"/>
			    <arg value="codename=${core.codename}"/>
			    <arg file="${builddir}/core.rapc"/>
			    <arg file="${builddir}/core.jar"/> 
				<arg file="output/@{version}/${lib.codename}.jar"/> 				
			</exec>			
			
			<copy file="preprocess/signature.csl" tofile="${builddir}/${core.codename}.csl" />
			<copy file="preprocess/signature.cso" tofile="${builddir}/${core.codename}.cso" />
			<move todir="${builddir}">
				<fileset dir=".">
					<include name="${core.codename}*" />
				</fileset>
			</move>

			<!-- Sign -->
			<sign dir="${builddir}" cod="${core.codename}.cod" />

			<!-- Dist -->
			<mkdir dir="output/@{version}/@{kind}" />
			<copy file="${builddir}/${core.codename}.cod" todir="output/@{version}/@{kind}" />
			<copy file="output/@{version}/${lib.codename}.cod" todir="output/@{version}/@{kind}" />



		</sequential>
	</macrodef>

	<!-- Sign the COD  -->
	<macrodef name="sign">
		<attribute name="cod" />
		<attribute name="dir" />
		<sequential>
			<echo message="=== Sign @{dir}/@{cod} ===" />

			<!--<sigtool jdehome="${jde.home}" codfile="output/tocod/${codename}.cod" /> -->
			<java jar="${blackberry.certificate.dir}/SignatureTool.jar" fork="true" dir="@{dir}" failonerror="true">
				<arg line=" -a -p KUZ93HQ1 -c -s @{cod}" />
			</java>
		</sequential>
	</macrodef>


	<target name="build">
		<for list="45" param="version">
			<sequential>
				<echo>Version @{version}</echo>
				<propertycopy name="jde.home" from="jde.@{version}.home" />
				<var name="net_rim_api.jar" value="${jde.home}/lib/net_rim_api.jar" />
				<var name="bb.buildjars.home" value="${jde.home}/bin" />

				<echo>jde.home=${jde.home}</echo>

				<libbuild version="@{version}" preprocess.symbols="${preprocess.release.symbols}" />

				<corebuild kind="debug" version="@{version}" preprocess.symbols="${preprocess.debug.symbols}" />

				<!--
				<corebuild kind="demo" version="@{version}" preprocess.symbols="${preprocess.demo.symbols}" />
				<corebuild kind="release" version="@{version}" preprocess.symbols="${preprocess.release.symbols}" />
				-->
			</sequential>
		</for>
	</target>

	<!-- Load to device depends="sign" -->
	<target name="load">
		<echo message="=== Load ===" />
		<echo>${jde.45.home}/bin/JavaLoader.exe ${lib.codename}.cod ${core.codename}.cod</echo>
		<exec executable="${jde.45.home}/bin/JavaLoader.exe" dir="." failonerror="true">
			<arg value="-wrddr" />
			<arg value="-u" />
			<arg value="load" />
			<arg value="output/45/debug//${lib.codename}.cod" />
			<arg value="output/45/debug/${core.codename}.cod" />
		</exec>
	</target>
</project>
